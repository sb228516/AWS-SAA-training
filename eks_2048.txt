Microsoft Windows [Version 10.0.22621.3007]
(c) Microsoft Corporation. All rights reserved.

C:\Users\supri>@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"   WARNING: An existing Chocolatey installation was detected. Installation will not continue. This script will not         overwrite existing installations.                                                                    If there is no Chocolatey installation at 'C:\ProgramData\chocolatey', delete the folder and attempt the installation   again.                             Please use choco upgrade chocolatey to handle upgrades of Chocolatey itself.
If the existing installation is not functional or a prior installation did not complete, follow these steps:
 - Backup the files at the path listed above so you can restore your previous installation if needed.
 - Remove the existing installation manually.
 - Rerun this installation script.
 - Reinstall any packages previously installed, if needed (refer to the lib folder in the backup).

Once installation is completed, the backup folder is no longer needed and can be deleted.

C:\Users\supri>@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
Forcing web requests to allow TLS v1.2 (Required for requests to Chocolatey.org)
Getting latest version of the Chocolatey package for download.
Not using proxy.
Getting Chocolatey from https://community.chocolatey.org/api/v2/package/chocolatey/2.2.2.
Downloading https://community.chocolatey.org/api/v2/package/chocolatey/2.2.2 to C:\Users\supri\AppData\Local\Temp\chocolatey\chocoInstall\chocolatey.zip
Not using proxy.
Extracting C:\Users\supri\AppData\Local\Temp\chocolatey\chocoInstall\chocolatey.zip to C:\Users\supri\AppData\Local\Temp\chocolatey\chocoInstall
Installing Chocolatey on the local machine
Creating ChocolateyInstall as an environment variable (targeting 'Machine')
  Setting ChocolateyInstall to 'C:\ProgramData\chocolatey'
WARNING: It's very likely you will need to close and reopen your shell
  before you can use choco.
Restricting write permissions to Administrators
We are setting up the Chocolatey package repository.
The packages themselves go to 'C:\ProgramData\chocolatey\lib'
  (i.e. C:\ProgramData\chocolatey\lib\yourPackageName).
A shim file for the command line goes to 'C:\ProgramData\chocolatey\bin'
  and points to an executable in 'C:\ProgramData\chocolatey\lib\yourPackageName'.

Creating Chocolatey folders if they do not already exist.

chocolatey.nupkg file not installed in lib.
 Attempting to locate it from bootstrapper.
PATH environment variable does not have C:\ProgramData\chocolatey\bin in it. Adding...
WARNING: Not setting tab completion: Profile file does not exist at
'C:\Users\supri\OneDrive\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1'.
Chocolatey (choco.exe) is now ready.
You can call choco from anywhere, command line or powershell by typing choco.
Run choco /? for a list of functions.
You may need to shut down and restart powershell and/or consoles
 first prior to using choco.
Ensuring Chocolatey commands are on the path
Ensuring chocolatey.nupkg is in the lib folder

C:\Users\supri>choco install -y eksctl
Chocolatey v2.2.2
Installing the following packages:
eksctl
By installing, you accept licenses for the packages.
Progress: Downloading eksctl 0.169.0... 100%

eksctl v0.169.0 [Approved]
eksctl package files install completed. Performing other installation steps.
eksctl is going to be installed in 'C:\ProgramData\chocolatey\lib\eksctl\tools'
Downloading eksctl 64 bit
  from 'https://github.com/eksctl-io/eksctl/releases/download/v0.169.0/eksctl_Windows_amd64.zip'
Progress: 100% - Completed download of C:\Users\supri\AppData\Local\Temp\chocolatey\eksctl\0.169.0\eksctl_Windows_amd64.zip (33.71 MB).
Download of eksctl_Windows_amd64.zip (33.71 MB) completed.
Hashes match.
Extracting C:\Users\supri\AppData\Local\Temp\chocolatey\eksctl\0.169.0\eksctl_Windows_amd64.zip to C:\ProgramData\chocolatey\lib\eksctl\tools...
C:\ProgramData\chocolatey\lib\eksctl\tools
 ShimGen has successfully created a shim for eksctl.exe
 The install of eksctl was successful.
  Software installed to 'C:\ProgramData\chocolatey\lib\eksctl\tools'

Chocolatey installed 1/1 packages.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).

C:\Users\supri>eksctl version
0.169.0

C:\Users\supri>aws iam list-users
{
    "Users": [
        {
            "Path": "/",
            "UserName": "EKS_user1",
            "UserId": "AIDA4NUSKVSR7R3CDR66I",
            "Arn": "arn:aws:iam::853931633827:user/EKS_user1",
            "CreateDate": "2024-01-31T18:55:54+00:00"
        }
    ]
}


C:\Users\supri>eksctl create cluster --name demo-cluster --region us-east-1 --fargate
2024-01-31 12:23:27 [ℹ]  eksctl version 0.169.0
2024-01-31 12:23:27 [ℹ]  using region us-east-1
2024-01-31 12:23:28 [ℹ]  setting availability zones to [us-east-1c us-east-1f]
2024-01-31 12:23:28 [ℹ]  subnets for us-east-1c - public:192.168.0.0/19 private:192.168.64.0/19
2024-01-31 12:23:28 [ℹ]  subnets for us-east-1f - public:192.168.32.0/19 private:192.168.96.0/19
2024-01-31 12:23:28 [ℹ]  using Kubernetes version 1.27
2024-01-31 12:23:28 [ℹ]  creating EKS cluster "demo-cluster" in "us-east-1" region with Fargate profile
2024-01-31 12:23:28 [ℹ]  if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=us-east-1 --cluster=demo-cluster'
2024-01-31 12:23:28 [ℹ]  Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster "demo-cluster" in "us-east-1"
2024-01-31 12:23:28 [ℹ]  CloudWatch logging will not be enabled for cluster "demo-cluster" in "us-east-1"
2024-01-31 12:23:28 [ℹ]  you can enable it with 'eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=us-east-1 --cluster=demo-cluster'
2024-01-31 12:23:28 [ℹ]
2 sequential tasks: { create cluster control plane "demo-cluster",
    2 sequential sub-tasks: {
        wait for control plane to become ready,
        create fargate profiles,
    }
}
2024-01-31 12:23:28 [ℹ]  building cluster stack "eksctl-demo-cluster-cluster"
2024-01-31 12:23:29 [ℹ]  deploying stack "eksctl-demo-cluster-cluster"
2024-01-31 12:23:59 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:24:29 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:25:30 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:26:30 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:27:30 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:28:31 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:29:31 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:30:32 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:31:32 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:32:32 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:33:33 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-cluster"
2024-01-31 12:35:36 [ℹ]  creating Fargate profile "fp-default" on EKS cluster "demo-cluster"
2024-01-31 12:37:47 [ℹ]  created Fargate profile "fp-default" on EKS cluster "demo-cluster"
2024-01-31 12:38:18 [ℹ]  "coredns" is now schedulable onto Fargate
2024-01-31 12:39:23 [ℹ]  "coredns" pods are now scheduled onto Fargate
2024-01-31 12:40:27 [ℹ]  "coredns" is now scheduled onto Fargate
2024-01-31 12:40:27 [ℹ]  "coredns" pods are now scheduled onto Fargate
2024-01-31 12:40:27 [ℹ]  waiting for the control plane to become ready
2024-01-31 12:40:42 [✔]  saved kubeconfig as "C:\\Users\\supri\\.kube\\config"
2024-01-31 12:40:42 [ℹ]  no tasks
2024-01-31 12:40:42 [✔]  all EKS cluster resources for "demo-cluster" have been created
2024-01-31 12:40:43 [✖]  kubectl not found, v1.10.0 or newer is required
2024-01-31 12:40:43 [ℹ]  cluster should be functional despite missing (or misconfigured) client binaries
2024-01-31 12:40:43 [✔]  EKS cluster "demo-cluster" in "us-east-1" region is ready

C:\Users\supri>kubectl version
Client Version: v1.29.1
Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3
Server Version: v1.27.9-eks-5e0fdde
WARNING: version difference between client (1.29) and server (1.27) exceeds the supported minor version skew of +/-1

C:\Users\supri>kubectl get pods -n demo-cluster
No resources found in demo-cluster namespace.

C:\Users\supri>aws eks update-kubeconfig --name demo-cluster --region us-east-1
Added new context arn:aws:eks:us-east-1:853931633827:cluster/demo-cluster to C:\Users\supri\.kube\config

C:\Users\supri>eksctl create fargateprofile \
Error: --cluster must be set

C:\Users\supri>    --cluster demo-cluster \
'--cluster' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>    --region us-east-1 \
'--region' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>    --name alb-sample-app \
'--name' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>eksctl create fargateprofile \
Error: --cluster must be set

C:\Users\supri>    --cluster demo-cluster \
'--cluster' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>    --region us-east-1 \
'--region' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>    --name alb-sample-app \
'--name' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>eksctl create fargate profile \
Error: unknown resource type "fargate"

Create resource(s)

Usage: eksctl create [flags]

Commands:
  eksctl create accessentry                     Create access entries
  eksctl create addon                           Create an Addon
  eksctl create cluster                         Create a cluster
  eksctl create fargateprofile                  Create a Fargate profile
  eksctl create iamidentitymapping              Create an IAM identity mapping
  eksctl create iamserviceaccount               Create an iamserviceaccount - AWS IAM role bound to a Kubernetes service account
  eksctl create nodegroup                       Create a nodegroup
  eksctl create podidentityassociation          Create a pod identity association

Common flags:
  -C, --color string   toggle colorized logs (valid options: true, false, fabulous) (default "true")
  -d, --dumpLogs       dump logs to disk on failure if set to true
  -h, --help           help for this command
  -v, --verbose int    set log level, use 0 to silence, 4 for debugging and 5 for debugging with AWS debug logging (default 3)

Use 'eksctl create [command] --help' for more information about a command.


For detailed docs go to https://eksctl.io/

Error: unknown resource type "fargate"

C:\Users\supri>eksctl create fargateprofile --cluster demo-cluster --region us-east-1 --name alb-sample-app --namespace game-2048
2024-01-31 13:58:03 [ℹ]  creating Fargate profile "alb-sample-app" on EKS cluster "demo-cluster"
2024-01-31 14:00:13 [ℹ]  created Fargate profile "alb-sample-app" on EKS cluster "demo-cluster"

C:\Users\supri>kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/examples/2048/2048_full.yaml
namespace/game-2048 created
deployment.apps/deployment-2048 created
service/service-2048 created
ingress.networking.k8s.io/ingress-2048 created

C:\Users\supri>kubectl get pods
No resources found in default namespace.

C:\Users\supri>kubectl get pods -n game-2048
NAME                               READY   STATUS    RESTARTS   AGE
deployment-2048-75db5866dd-bqwx5   0/1     Pending   0          59s
deployment-2048-75db5866dd-crrsk   0/1     Pending   0          59s
deployment-2048-75db5866dd-dr7sg   0/1     Pending   0          59s
deployment-2048-75db5866dd-fnkx6   1/1     Running   0          59s
deployment-2048-75db5866dd-zwmbt   1/1     Running   0          59s

C:\Users\supri>kubectl get svc -n game-2048
NAME           TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
service-2048   NodePort   10.100.180.214   <none>        80:32198/TCP   98s

C:\Users\supri>kubectl get ingress -n game-2048
NAME           CLASS   HOSTS   ADDRESS   PORTS   AGE
ingress-2048   alb     *                 80      2m25s

C:\Users\supri>eksctl utils associate-iam-oidc-provider --cluster demo-cluster --approve
2024-01-31 14:06:44 [ℹ]  will create IAM Open ID Connect provider for cluster "demo-cluster" in "us-east-1"
2024-01-31 14:06:44 [✔]  created IAM Open ID Connect provider for cluster "demo-cluster" in "us-east-1"

C:\Users\supri>curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  8386  100  8386    0     0  20502      0 --:--:-- --:--:-- --:--:-- 23101

C:\Users\supri>aws iam create-policy \

usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:

  aws help
  aws <command> help
  aws <command> <subcommand> help

aws: error: the following arguments are required: --policy-name, --policy-document


C:\Users\supri>    --policy-name AWSLoadBalancerControllerIAMPolicy \
'--policy-name' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json
{
    "Policy": {
        "PolicyName": "AWSLoadBalancerControllerIAMPolicy",
        "PolicyId": "ANPA4NUSKVSRRFIZ74H5W",
        "Arn": "arn:aws:iam::853931633827:policy/AWSLoadBalancerControllerIAMPolicy",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2024-01-31T22:11:57+00:00",
        "UpdateDate": "2024-01-31T22:11:57+00:00"
    }
}


C:\Users\supri>eksctl create iamserviceaccount --cluster=demo-cluster --namespace=kube-system --name=aws-load-balancer-controller --role-name AmazonEKSLoadBalancerControllerRole --attach-policy-arn=arn:aws:iam::853931633827:policy/AWSLoadBalancerControllerIAMPolicy--approve
2024-01-31 14:13:23 [ℹ]  1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included (based on the include/exclude rules)
2024-01-31 14:13:23 [!]  serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override
2024-01-31 14:13:23 [ℹ]  1 task: {
    2 sequential sub-tasks: {
        create IAM role for serviceaccount "kube-system/aws-load-balancer-controller",
        create serviceaccount "kube-system/aws-load-balancer-controller",
    } }2024-01-31 14:13:23 [ℹ]  building iamserviceaccount stack "eksctl-demo-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-01-31 14:13:24 [ℹ]  deploying stack "eksctl-demo-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-01-31 14:13:24 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-01-31 14:13:54 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-01-31 14:13:55 [ℹ]  created serviceaccount "kube-system/aws-load-balancer-controller"

C:\Users\supri>helm repo add eks https://aws.github.io/eks-charts
'helm' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\supri>choco install kubernetes-helm
Chocolatey v2.2.2
Installing the following packages:
kubernetes-helm
By installing, you accept licenses for the packages.
Progress: Downloading kubernetes-helm 3.13.3... 100%

kubernetes-helm v3.13.3 [Approved]
kubernetes-helm package files install completed. Performing other installation steps.
The package kubernetes-helm wants to run 'chocolateyInstall.ps1'.
Note: If you don't run this script, the installation will fail.
Note: To confirm automatically next time, use '-y' or consider:
choco feature enable -n allowGlobalConfirmation
Do you want to run the script?([Y]es/[A]ll - yes to all/[N]o/[P]rint): y

Downloading kubernetes-helm 64 bit
  from 'https://get.helm.sh/helm-v3.13.3-windows-amd64.zip'
Progress: 100% - Completed download of C:\Users\supri\AppData\Local\Temp\chocolatey\kubernetes-helm\3.13.3\helm-v3.13.3-windows-amd64.zip (15.59 MB).
Download of helm-v3.13.3-windows-amd64.zip (15.59 MB) completed.
Hashes match.
Extracting C:\Users\supri\AppData\Local\Temp\chocolatey\kubernetes-helm\3.13.3\helm-v3.13.3-windows-amd64.zip to C:\ProgramData\chocolatey\lib\kubernetes-helm\tools...
C:\ProgramData\chocolatey\lib\kubernetes-helm\tools
 ShimGen has successfully created a shim for helm.exe
 The install of kubernetes-helm was successful.
  Software installed to 'C:\ProgramData\chocolatey\lib\kubernetes-helm\tools'

Chocolatey installed 1/1 packages.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).

C:\Users\supri>helm repo add eks https://aws.github.io/eks-charts
"eks" has been added to your repositories

C:\Users\supri>helm repo update eks
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "eks" chart repository
Update Complete. ⎈Happy Helming!⎈

C:\Users\supri>helm install aws-load-balancer-controller eks/aws-load-balancer-controller           -n kube-system --set clusterName=demo-cluster--set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=us-east-1 --set vpcId=vpc-0fc09f6eb80ae3a4d
Error: INSTALLATION FAILED: expected at most two arguments, unexpected arguments: serviceAccount.create=false

C:\Users\supri>helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=demo-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=us-east-1 --set vpcId=vpc-0fc09f6eb80ae3a4d
NAME: aws-load-balancer-controller
LAST DEPLOYED: Wed Jan 31 14:26:38 2024
NAMESPACE: kube-system
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
AWS Load Balancer controller installed!

C:\Users\supri>kubectl get deployment -n kube-system aws-load-balancer-controller
NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
aws-load-balancer-controller   2/2     2            2           83s

C:\Users\supri>
